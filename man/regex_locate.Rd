% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities-regex.R
\name{regex_locate}
\alias{regex_locate}
\alias{regex_locate_all}
\title{Locate the position of patterns in a string}
\usage{
regex_locate(
  string,
  pattern,
  ignore.case = FALSE,
  perl = FALSE,
  fixed = FALSE,
  useBytes = FALSE
)

regex_locate_all(
  string,
  pattern,
  ignore.case = FALSE,
  perl = FALSE,
  fixed = FALSE,
  useBytes = FALSE
)
}
\arguments{
\item{string}{a character vector where matches are sought, or an object which
can be coerced by as.character to a character vector. Long vectors are supported.}

\item{pattern}{character string containing a regular expression (or character
string for fixed = TRUE) to be matched in the given character vector. Coerced
by as.character to a character string if possible. If a character vector of
length 2 or more is supplied, the first element is used with a warning. Missing
values are allowed except for regexpr, gregexpr and regexec.}

\item{ignore.case}{if FALSE, the pattern matching is case sensitive and if TRUE,
case is ignored during matching.}

\item{perl}{logical. Should Perl-compatible regexps be used?}

\item{fixed}{logical. If TRUE, pattern is a string to be matched as is. Overrides all conflicting arguments.}

\item{useBytes}{logical. If TRUE, pattern is a string to be matched as is. Overrides all conflicting arguments.}
}
\description{
Vectorised over string and pattern. If the match is of length 0, (e.g. from a
special match like $) end will be one character less than start.
}
\section{Functions}{

\itemize{
\item regex_locate: Locate first match, return an integer matrix. First column gives start postion of match, and second column gives end position.
\item regex_locate_all: Locate all matches, return a list of integer matrices.
}
}

\examples{
fruit <- c("apple", "banana", "pear", "pineapple")

regex_locate(fruit, "$")
regex_locate(fruit, "a")
regex_locate(fruit, "e")
regex_locate(fruit, c("a", "b", "p", "p"))

regex_locate_all(fruit, "a")
regex_locate_all(fruit, "e")
regex_locate_all(fruit, c("a", "b", "p", "p"))


}
