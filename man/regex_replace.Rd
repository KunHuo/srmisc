% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities-regex.R
\name{regex_replace}
\alias{regex_replace}
\alias{regex_replace_all}
\title{Replace matched patterns in a string}
\usage{
regex_replace(
  string,
  pattern,
  replacement,
  ignore.case = FALSE,
  perl = FALSE,
  fixed = FALSE,
  useBytes = FALSE
)

regex_replace_all(
  string,
  pattern,
  replacement,
  ignore.case = FALSE,
  perl = FALSE,
  fixed = FALSE,
  useBytes = FALSE
)
}
\arguments{
\item{string}{a character vector where matches are sought, or an object which
can be coerced by as.character to a character vector. Long vectors are supported.}

\item{pattern}{character string containing a regular expression (or character
string for fixed = TRUE) to be matched in the given character vector. Coerced
by as.character to a character string if possible. If a character vector of
length 2 or more is supplied, the first element is used with a warning. Missing
values are allowed except for regexpr, gregexpr and regexec.}

\item{replacement}{a replacement for matched pattern. Coerced
to character if possible. For fixed = FALSE this can include backreferences
"\\1" to "\\9" to parenthesized subexpressions of pattern. For perl = TRUE only,
it can also contain "\\U" or "\\L" to convert the rest of the replacement to upper
or lower case and "\\E" to end case conversion. If a character vector of length 2
or more is supplied, the first element is used with a warning. If NA, all
elements in the result corresponding to matches will be set to NA.}

\item{ignore.case}{if FALSE, the pattern matching is case sensitive and if TRUE,
case is ignored during matching.}

\item{perl}{logical. Should Perl-compatible regexps be used?}

\item{fixed}{logical. If TRUE, pattern is a string to be matched as is. Overrides all conflicting arguments.}

\item{useBytes}{logical. If TRUE, pattern is a string to be matched as is. Overrides all conflicting arguments.}
}
\value{
a vector of string.
}
\description{
Replace matched patterns in a string
}
\section{Functions}{

\itemize{
\item regex_replace: Replace first match.
\item regex_replace_all: Replace all matches.
}
}

\examples{
fruits <- c("one apple", "two pears", "three bananas")

regex_replace(fruits, "[aeiou]", "-")
regex_replace_all(fruits, "[aeiou]", "-")

regex_replace(fruits, "([aeiou])", "")
regex_replace(fruits, "([aeiou])", "\\\\1\\\\1")
regex_replace(fruits, "[aeiou]", c("1", "2", "3"))
regex_replace(fruits, c("a", "e", "i"), "-")

}
