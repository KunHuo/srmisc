% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities-regex.R
\name{regex_extract}
\alias{regex_extract}
\alias{regex_extract_all}
\title{Extract matching patterns from a string}
\usage{
regex_extract(
  string,
  pattern,
  ignore.case = FALSE,
  perl = FALSE,
  fixed = FALSE,
  useBytes = FALSE
)

regex_extract_all(
  string,
  pattern,
  ignore.case = FALSE,
  perl = FALSE,
  fixed = FALSE,
  useBytes = FALSE
)
}
\arguments{
\item{string}{a character vector where matches are sought, or an object which
can be coerced by as.character to a character vector. Long vectors are supported.}

\item{pattern}{character string containing a regular expression (or character
string for fixed = TRUE) to be matched in the given character vector. Coerced
by as.character to a character string if possible. If a character vector of
length 2 or more is supplied, the first element is used with a warning. Missing
values are allowed except for regexpr, gregexpr and regexec.}

\item{ignore.case}{if FALSE, the pattern matching is case sensitive and if TRUE,
case is ignored during matching.}

\item{perl}{logical. Should Perl-compatible regexps be used?}

\item{fixed}{logical. If TRUE, pattern is a string to be matched as is. Overrides all conflicting arguments.}

\item{useBytes}{logical. If TRUE, pattern is a string to be matched as is. Overrides all conflicting arguments.}
}
\description{
Extract matching patterns from a string
}
\section{Functions}{

\itemize{
\item regex_extract: Extract first match, return a vector.
\item regex_extract_all: Extract all matches, return a list.
}
}

\examples{
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
regex_extract(shopping_list, "\\\\d")
regex_extract(shopping_list, "[a-z]+")
regex_extract(shopping_list, "[a-z]{1,4}")
regex_extract(shopping_list, "\\\\b[a-z]{1,4}\\\\b")

# Extract all matches
regex_extract_all(shopping_list, "[a-z]+")
regex_extract_all(shopping_list, "\\\\b[a-z]+\\\\b")
regex_extract_all(shopping_list, "\\\\d")

}
