% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities-factor.R
\name{fct_recode}
\alias{fct_recode}
\title{Recode a factor}
\usage{
fct_recode(x, ..., elselevel = NULL, use.empty = FALSE, num = FALSE)
}
\arguments{
\item{x}{the factor whose levels are to be altered. If x is character it will be
factorized (using factor defaults).}

\item{...}{the old levels (combined by c() if there are several) named with the new level.
See examples.}

\item{elselevel}{the value for levels, which are not matched by newlevel list. If this is set
to NULL, the elselevels will be left unchanged. If set to NA (default) non
matched levels will be set to NA.}

\item{use.empty}{logical. Defines how a new level, which can't be found in x, should be handled.
Should it be left in the level's list or be dropped? The default is FALSE,
which drops empty levels.}

\item{num}{logical. If set to TRUE the result will be numeric}
}
\value{
the factor having the new levels applied.
}
\description{
Combining or rearranging a factor can be tedious if it has many levels.
fct_recode supports this step by accepting a direct definition of new levels
by enumerating old levelnames as argument and adding an "elselevel" option.
If new levels are given as integer values they will be translated in the
according levels.
}
\examples{
set.seed(1984)
x <- factor(sample(1:15, 20, replace=TRUE))
levels(x) <- paste("old", levels(x), sep="_")

y <- fct_recode(x,
            "new_1"   = c("old_1","old_4","old_5"),
            "new_2"   = c("old_6","old_10","old_11"),
            "new_3"   = c("old_12","old_13"),
            elselevel = "other")
data.frame(x=x, y=y)


x <- factor(letters[1:6])

z1 <- fct_recode(x, AB=c("a","b"), CD=c("c","d"), elselevel="none of these")
z2 <- fct_recode(x, AB=c("a","b"), CD=c("c","d"), elselevel=NA)
z3 <- fct_recode(x, AB=c("a","b"), CD=c("c","d"), elselevel=NULL)
z4 <- fct_recode(x, AB=c("a","b"), GH=c("g","h"), elselevel=NA, use.empty=TRUE)
z5 <- fct_recode(x, AB=c("a","b"), GH=c("g","h"), elselevel=NA, use.empty=FALSE)

data.frame(z1, z2, z3, z4, z5)

lapply(data.frame(z1, z2, z3, z4, z5), levels)

# empty level GH exists in z4...
table(z4, useNA="ifany")
# and is dropped in z5
table(z5, useNA="ifany")

# use integers to define the groups to collapse
set.seed(1972)
(likert <- factor(sample(1:10, size=15, replace=TRUE),
                  levels=1:10, labels=gettextf("(\%s)", 1:10)))
fct_recode(likert, det=1:6, pas=7:8, pro=9:10)

# or directly turned to numeric
fct_recode(likert, "1"=1:6, "2"=7:8, "5"=9:10, num=TRUE)
}
\seealso{
\link{factor}, \link{levels}
}
